package com.yrgo.services.customers;

import com.yrgo.dataaccess.CallRowMapper;
import com.yrgo.dataaccess.CustomerDao;
import com.yrgo.dataaccess.CustomerRowMapper;
import com.yrgo.dataaccess.RecordNotFoundException;
import com.yrgo.domain.Call;
import com.yrgo.domain.Customer;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.List;

public class CustomerDaoJdbcTemplateImpl implements CustomerDao {
    private static final String DELETE_SQL = "DELETE FROM CUSTOMER WHERE CUSTOMER_ID=?";
    private static final String UPDATE_SQL = "UPDATE CUSTOMER SET COMPANY_NAME=?, EMAIL=?, TELEPHONE=?,NOTES=? WHERE CUSTOMER_ID=?";
    private static final String INSERT_SQL = "INSERT INTO CUSTOMER (CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES) VALUES (?,?,?,?,?)";
    private static final String GET_ALL_CUSTOMERS_SQL = "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER";
    private static final String CUSTOMER_DETAILS =  "SELECT CUSTOMER_ID, COMPANY_NAME, EMAIL, TELEPHONE, NOTES FROM CUSTOMER WHERE CUSTOMER_ID = ?";
    private static final String ADD_CALL =  "INSERT INTO TBL_CALL ( NOTES,CUSTOMER_ID) VALUES (?, ?)";
    private static final String GET_CALL = "SELECT NOTES, CUSTOMER_ID FROM TBL_CALL WHERE CUSTOMER_ID = ?";

    private JdbcTemplate template;

    public CustomerDaoJdbcTemplateImpl(JdbcTemplate template) {
        this.template = template;
    }

    private void createTables() {
        try {
            this.template.update(
                    "CREATE TABLE IF NOT EXISTS CUSTOMER (CUSTOMER_ID VARCHAR(50), COMPANY_NAME VARCHAR(255) NOT NULL,EMAIL VARCHAR(255),TELEPHONE VARCHAR(20),NOTES VARCHAR(500))"
            );
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Customer table exists");
        }
        try {
            this.template.update(
                    "CREATE TABLE IF NOT EXISTS TBL_CALL (" +
                            "CALL_ID integer generated by default as identity (start with 1), " +
                            "NOTES VARCHAR(255), " +
                            "CUSTOMER_ID VARCHAR(50)) "

            );
        } catch (org.springframework.jdbc.BadSqlGrammarException e) {
            System.out.println("Assuming the Call table already exists.");
        }
    }

    @Override
    public void create(Customer customer) {
        template.update(INSERT_SQL,customer.getCustomerId(),customer.getCompanyName(),customer.getEmail(), customer.getTelephone(),
                customer.getNotes());
    }

    @Override
    public Customer getById(String customerId) throws RecordNotFoundException {
        return null;
    }

    @Override
    public List<Customer> getByName(String name) {
        return null;
    }

    @Override
    public void update(Customer customerToUpdate) throws RecordNotFoundException {
        this.template.update(UPDATE_SQL,customerToUpdate.getCustomerId(),customerToUpdate.getCompanyName(),
                customerToUpdate.getEmail(), customerToUpdate.getTelephone(),
                customerToUpdate.getNotes() );
    }

    @Override
    public void delete(Customer oldCustomer) throws RecordNotFoundException {
        this.template.update(DELETE_SQL, oldCustomer.getCustomerId());
    }

    @Override
    public List<Customer> getAllCustomers() {
        return template.query(GET_ALL_CUSTOMERS_SQL, new CustomerRowMapper());
    }

    @Override
    public Customer getFullCustomerDetail(String customerId) throws RecordNotFoundException {
       Customer customer = template.queryForObject(CUSTOMER_DETAILS, new Object[]{customerId}, new CustomerRowMapper());
        List<Call> calls = template.query(GET_CALL, new Object[]{customerId}, new CallRowMapper());
        customer.setCalls(calls);
        return customer;
    }

    @Override
    public void addCall(Call newCall, String customerId) throws RecordNotFoundException {

        template.update(ADD_CALL, newCall.getNotes(), customerId);

    }
}
